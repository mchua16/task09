df %>%
mutate_(df, .dots = setNames(list(add2), name))
}
add_mutate(f('col1', 'col2', 'sumsss'))
add_mutate('col1', 'col2', 'sumsss')
add_mutate(col1, col2, 'sumsss')
library(lazyeval)
f = function(col1, col2, new_col_name) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
mtcars %>% mutate_(.dots = setNames(list(mutate_call), new_col_name))
}
head(f('wt', 'mpg', 'hahaaa'))
df <- mtcars
f = function(col1, col2, new_col_name) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(mutate_call), new_col_name))
}
head(f('wt', 'mpg', 'hahaaa'))
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), new_col_name))
}
add_mutate(col1, col2, 'sumsss')
add_mutate <- function(col1, col2, new_col_name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame.
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), new_col_name))
}
add_mutate(col1, col2, 'sumsss')
add_mutate <- function(col1, col2, new_col_name) { #creates a function assigned as add_mutate
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), new_col_name))
}
add_mutate(col1, col2, 'sumsss')
add_mutate <- function(col1, col2, new_col_name) { #creates a function assigned as add_mutate
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), new_col_name))
}
add_mutate(f('mpg', 'cyl', 'sumsss'))
df <- mtcars
add_mutate <- function(col1, col2, new_col_name) { #creates a function assigned as add_mutate
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), new_col_name))
}
add_mutate(f('mpg', 'cyl', 'sumsss'))
df <- mtcars
f = function(col1, col2, new_col_name) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(mutate_call), new_col_name))
}
head(f('wt', 'mpg', 'hahaaa'))
f = function(col1, col2, col_name) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(mutate_call), col_name))
}
head(f('wt', 'mpg', 'hahaaa'))
add_mutate <- function(col1, col2, new_col_name) { #creates a function assigned as add_mutate
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), new_col_name))
}
add_mutate(f('wt', 'mpg', 'sumsss'))
head(add_mutate('wt', 'mpg', 'sumsss'))
add_mutate('wt', 'mpg', 'sumsss')
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
df <- mtcars
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), name, na.rm=TRUE))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
if(is.numeric(col1)!= TRUE)
warning("col1 is not numeric") #if col1 is not numeric, this warning will be received. a new column with na values is also added when the next line is run.
if(is.numeric(col2)!= TRUE)
warning("col2 is not numeric")
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add2), name), na.rm=TRUE)
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(sum(c(a,b), na.rm = TRUE), .dots = setNames(list(add2), name))
}
('wt', 'mpg', 'sumsss')
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(sum(c(col1,col2), na.rm = TRUE), .dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(Sum = sum(c(col1,col2), na.rm = TRUE), .dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
rowwise() %>%
mutate_(Sum = sum(c(col1,col2), na.rm = TRUE), .dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
rowwise() %>%
mutate_(sum(c(col1,col2), na.rm = TRUE), .dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
rowwise() %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
df <- mtcars
col1 <- diamonds$depth #assigns the depth column of the diamonds dataset to col1
col2 <- diamonds$table #assigns the table column of the diamonds dataset to col2
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
rowwise() %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
quinate <- read.csv("quinate.csv") #this line and lines below were added to test the "invalid arguments" bullet.
df <- quinate$Time
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
rowwise() %>%
mutate_(.dots = setNames(list(add2), name))
add_mutate(df, col1, col2, name)
add_mutate(df, col1, col2, name)
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate(df, col1, col2, name)
df <- mtcars
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
df <- mtcars
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
df <- mtcars
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
df <- mtcars
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
df <- mtcars
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
df <- mtcars
library(dplyr)
library(tidyverse)
library(lazyeval)
df <- mtcars
library(lazyeval)
df <- mtcars
f = function(col1, col2, col_name) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(mutate_call), col_name))
}
head(f('wt', 'mpg', 'hahaaa'))
library(lazyeval)
df <- mtcars
f = function(col1, col2, col_name) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(mutate_call), col_name))
}
head(f('wt', 'mpg', 'hahaaa'))
library(dplyr)
library(tidyverse)
library(lazyeval)
library(lazyeval)
df <- mtcars
f = function(col1, col2, col_name) {
mutate_call = lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(mutate_call), col_name))
}
head(f('wt', 'mpg', 'hahaaa'))
df <- mtcars
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
quinate <- read.csv("quinate.csv") #this line and lines below were added to test the "invalid arguments" bullet.
x <- quinate$Time
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
x %>%
mutate_(.dots = setNames(list(add2), name))
}
quinate(x, col1, col2, name)
add_mutate(x, col1, col2, name)
View(quinate)
add_mutate(x, time, hours, name)
add_mutate(x)
add_mutate(x, col1, col2)
add_mutate('Hours', 'Time', 'namessss')
head(add_mutate('Hours', 'Time', 'namessss'))
quinate <- read.csv("quinate.csv") #this line and lines below were added to test the "invalid arguments" bullet.
x <- quinate$Time
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
x %>%
mutate_(.dots = setNames(list(add2), name))
}
head(add_mutate('Hours', 'Time', 'namessss'))
quinate <- read.csv("quinate.csv") #this line and lines below were added to test the "invalid arguments" bullet.
x <- quinate$Hours
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
x %>%
mutate_(.dots = setNames(list(add2), name))
}
head(add_mutate('Hours', 'Time', 'namessss'))
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
}
head(add_mutate('Hours', 'Time', 'namessss'))
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
df %>%
mutate(new_col=col1+col2)
}
head(add_mutate('Hours', 'Time', 'namessss'))
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
df %>%
mutate(new_col=col1+col2)
}
head(add_mutate('Hours', 'Average', 'namessss'))
quinate <- read.csv("quinate.csv") #this line and lines below were added to test the "invalid arguments" bullet.
x <- quinate$Hours
add_mutate <- function(col1, col2) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
df %>%
mutate(new_col=col1+col2)
}
head(add_mutate('Hours', 'Average'))
add_mutate <- function(df, col1, col2) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
mutate(new_col=col1+col2)
}
head(add_mutate(df, 'Hours', 'Average'))
df <- mtcars
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
as.data.frame(df) #I think this makes df a data frame?
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
summarize(mutate_(.dots = setNames(list(add2), name)), na.rm=TRUE)
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name)
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
add_mutate <- function(col1, col2, name) { #creates a function assigned as add_mutate
if(is.data.frame(df)!= TRUE)
warning("not a data frame") #if df is not a data frame, this warning is received.
add2 <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2), na.rm=TRUE)
df %>%
mutate_(.dots = setNames(list(add2), name))
}
add_mutate('wt', 'mpg', 'sumsss')
is.name(col1)
browseVignettes("tidyverse") #browses ggplot2 vignette
browseVignettes("ggplot2") #browses ggplot2 vignette
browseVignettes("dplyr") #browses ggplot2 vignette
take_mean <- function(x) { #creates a function assigned as take_mean
mean(x) #takes the mean of x
}
take_mean(diamonds, diamonds$price)
take_mean(diamonds, diamonds$price)
take_mean(diamonds$price)
take_mean(diamonds, 'price')
take_mean <- function(df, x) { #creates a function assigned as take_mean
df %>%
mean(x) #takes the mean of x
}
take_mean(diamonds, 'price')
take_mean(diamonds, diamonds$price)
take_mean(diamonds$price)
take_mean <- function(x) { #creates a function assigned as take_mean%
mean(x) #takes the mean of x
}
take_mean(diamonds$price)
take_mean(diamonds$price) #takes the average of the prices found in the price column of the diamonds data set
diamonds
take_mean(diamonds$price) #takes the average of the prices found in the price column of the diamonds data set
diamonds$price
take_mean(diamonds$price) #takes the average of the prices found in the price column of the diamonds data set
take_mean(diamonds$price) #takes the average of the prices found in the price column of the diamonds data set
mean(diamonds$price)
install_github("mchua16/take_mean")
library(devtools) #loads devtools
install_github("mchua16/take_mean")
install_github("mchua16/take_mean")
install_github(take_mean)
install_github("mchua/task09/take_mean")
devtools::install_github("mchua/task09/take_mean")
devtools::install_github("mchua/take_mean")
devtools::install_github("mchua/task09")
devtools::install_github("mchua/task09/task9/R/take_mean")
devtools::install_github("mchua/task09/task9/R/task9")
devtools::install_github("mchua/task09/task9/R/task9.r")
devtools::install_github("mchua/task09/task9/R/task9.R")
install_github('task_mean','mchua16')
install_github("mchua16/task9")
install_github("mchua16/task09")
install_github("mchua16/take_mean")
instal;("take_mean")
install("take_mean")
install(take_mean)
install.packages(take_mean)
install.packages("take_mean")
?take_mean
??take_mean
#getwd()
getwd(
)
setwd(C:/Users/Michelle/Documents/R/GEOL590_2017/R/task9)
setwd(/Documents/R/GEOL590_2017/R/task9)
setwd("Users/Michelle/Documents/R/GEOL590_2017/R/task9)
setwd(Users/Michelle/Documents/R/GEOL590_2017/R/task9)
getwd()
setwd("/Users/Michelle/Documents/R/GEOL590_2017/R/task9)
getwd()
setwd("/Users/Michelle/Documents/R/GEOL590_2017/R/task9)
getwd()
setwd("/Users/Michelle/Documents/R/GEOL590_2017/R/task9)
getwd()
setwd("/Users/Michelle/Documents/R/GEOL590_2017/R/task9)
getwd()
setwd("/Users/Michelle/Documents/R/GEOL590_2017/R/task9)
getwd()
setwd("task9")
getwd()
??take_mean
??task9
install.packages("take_mean")
??take_mean
install.packages("take_mean")
??take_mean
